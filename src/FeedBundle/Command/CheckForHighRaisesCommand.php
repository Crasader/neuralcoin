<?php

namespace FeedBundle\Command;

use DataModelBundle\Repository\SymbolRepository;
use DataModelBundle\Repository\TradeRepository;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CheckForHighRaisesCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this->setName('neuralcoin:check-for-high-raises')
            ->addArgument('exchange', InputArgument::REQUIRED, '"bittrex|poloniex|bitstamp"')
            ->addArgument('timescope', InputArgument::OPTIONAL, 'time back', '15 minutes')
            ->addArgument('raise-trigger-percentage', InputArgument::OPTIONAL, '"5" => 5%', 3)
            ;
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        /** @var TradeRepository $tradeRepo */
        $tradeRepo = $this->getContainer()->get('nc.repo.trade');
        /** @var SymbolRepository $symbolRepo */
        $symbolRepo = $this->getContainer()->get('nc.repo.symbol');

        $exchanges = $tradeRepo->getKnownExchanges();
        if (!in_array($exchange = $input->getArgument('exchange'), $exchanges)) {
            $output->writeln('unsupported exchange: ' . $exchange . ', known exchange: ' . implode(', ', $exchanges));
            return;
        }

        $symbols = $symbolRepo->findSymbolsForExchange($exchange);
        $table = new Table($output);

        $rows = [];
        $headers = ['date', 'symbol', 'old', 'new', 'actual change'];

        foreach($symbols as $symbol) {
            $oldTrade = $tradeRepo->findTradeAgo($symbol, $exchange, new \DateTime('-' . $input->getArgument('timescope')));
            $currentPrice = $tradeRepo->findLastPrice($symbol, false, $exchange);
            $output->writeln('<fg=green>checking symbol: </fg=green> ' . $symbol->getName());
            $triggerLimit = (float)$input->getArgument('raise-trigger-percentage');
            $raise = (float)(($currentPrice / $oldTrade->getPrice()) - 1);
            $raise = $raise * 100;
            if ($raise > $triggerLimit) {
                $rows[] = [
                    (new \DateTime())->format('Y-m-d H:i:s'),
                    $symbol->getName(),
                    $oldTrade->getPrice(),
                    $currentPrice,
                    (float)(($currentPrice / $oldTrade->getPrice()) - 1) * 100
                ];
            }
        }

        $table->setHeaders($headers);
        $table->setRows($rows);
        $table->render();
    }
}